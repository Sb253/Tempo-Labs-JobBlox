# Docker Compose for local development and testing
version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:3001/api
      - VITE_WS_URL=ws://localhost:3001/ws
    volumes:
      # Mount nginx config for easy development
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - jobblox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Mock backend service for testing
  backend:
    image: node:18-alpine
    ports:
      - "3001:3000"
    working_dir: /app
    command: >
      sh -c "
        echo 'Starting mock backend server...' &&
        npm init -y &&
        npm install express cors &&
        cat > server.js << 'EOF'
        const express = require('express');
        const cors = require('cors');
        const app = express();
        
        app.use(cors());
        app.use(express.json());
        
        // Health check
        app.get('/health', (req, res) => {
          res.json({ status: 'healthy', timestamp: new Date().toISOString() });
        });
        
        // Mock API endpoints
        app.get('/api/health', (req, res) => {
          res.json({ status: 'ok', service: 'jobblox-api' });
        });
        
        app.post('/api/auth/login', (req, res) => {
          res.json({
            success: true,
            data: {
              user: { id: '1', email: req.body.email, name: 'Test User' },
              token: 'mock-jwt-token',
              tenantId: 'test-tenant'
            }
          });
        });
        
        app.get('/api/users', (req, res) => {
          res.json({
            success: true,
            data: [{ id: '1', email: 'test@example.com', name: 'Test User' }]
          });
        });
        
        const PORT = process.env.PORT || 3000;
        app.listen(PORT, '0.0.0.0', () => {
          console.log(\`Mock backend running on port \${PORT}\`);
        });
        EOF
        node server.js
      "
    networks:
      - jobblox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - jobblox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  jobblox-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
