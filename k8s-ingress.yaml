# Kubernetes Ingress configuration for multi-tenant SPA routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jobblox-frontend-ingress
  namespace: jobblox
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Critical: Handle SPA routing with proper fallback
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Handle tenant-specific routes
      location ~ ^/([a-zA-Z0-9-_]+)/(dashboard|customers|jobs|estimates|invoices|payments|employees|reports|settings)/?.*$ {
        try_files $uri $uri/ /index.html;
        add_header X-Tenant-Route "$1" always;
      }
      
      # Handle admin routes
      location ~ ^/admin/?.*$ {
        try_files $uri $uri/ /index.html;
        add_header X-Admin-Route "true" always;
      }
      
      # Handle auth routes
      location ~ ^/login/?.*$ {
        try_files $uri $uri/ /index.html;
        add_header X-Auth-Route "true" always;
      }
      
      # Handle monitoring routes
      location ~ ^/monitoring/?.*$ {
        try_files $uri $uri/ /index.html;
        add_header X-Monitoring-Route "true" always;
      }
      
      # Handle tempo storyboard routes
      location ~ ^/tempobook/?.*$ {
        try_files $uri $uri/ /index.html;
        add_header X-Tempo-Route "true" always;
      }
      
      # Handle public routes
      location ~ ^/(saas|tenants|subscription)/?.*$ {
        try_files $uri $uri/ /index.html;
        add_header X-Public-Route "true" always;
      }
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://api.tempo.new; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https: wss:;" always;
    # Enable gzip compression
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/gzip-types: "text/plain,text/css,application/json,application/javascript,text/xml,application/xml,application/xml+rss,text/javascript"
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "1000"
spec:
  tls:
  - hosts:
    - jobblox.example.com
    - "*.jobblox.example.com"
    secretName: jobblox-tls-secret
  rules:
  - host: jobblox.example.com
    http:
      paths:
      # API routes - proxy to backend
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: jobblox-backend-service
            port:
              number: 3000
      # WebSocket routes for real-time features
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: jobblox-websocket-service
            port:
              number: 3001
      # Frontend SPA - catch all other routes
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jobblox-frontend-service
            port:
              number: 80
  # Wildcard subdomain support for tenant-specific domains
  - host: "*.jobblox.example.com"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jobblox-frontend-service
            port:
              number: 80
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: jobblox-frontend-service
  namespace: jobblox
  labels:
    app: jobblox-frontend
spec:
  selector:
    app: jobblox-frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobblox-frontend-deployment
  namespace: jobblox
  labels:
    app: jobblox-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: jobblox-frontend
  template:
    metadata:
      labels:
        app: jobblox-frontend
    spec:
      containers:
      - name: frontend
        image: jobblox/frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          value: "production"
        - name: VITE_API_URL
          value: "https://jobblox.example.com/api"
        - name: VITE_WS_URL
          value: "wss://jobblox.example.com/ws"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
# NGINX ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: jobblox
data:
  nginx.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # SPA fallback - all routes serve index.html
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Error pages
        error_page 404 /index.html;
    }
